{"version":3,"file":"component---src-templates-topic-tsx-2a0d17a103711c1bd4dd.js","mappings":"sIAoCA,IAzBqC,SAAC,GAM/B,IALHA,EAKE,EALFA,MACAC,EAIE,EAJFA,KACAC,EAGE,EAHFA,KACAC,EAEE,EAFFA,OACAC,EACE,EADFA,QAGA,OADAC,QAAQC,IAAIL,GAERM,EAAAA,cAAAA,MAAAA,CAAKC,IAAKP,GACNM,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAIT,GAAOD,GAASC,IAE9BM,EAAAA,cAAAA,QAAAA,KACKL,EADL,cAEaC,EAAOQ,KAAI,SAACC,EAAOC,EAAGC,GAAX,OAChBP,EAAAA,cAACE,EAAAA,KAAD,CAAMC,GAAE,WAAaE,EAAb,KACFC,EAAIC,EAAIC,OAAS,EAAKH,EAAQ,KAAOA,OAGnDL,EAAAA,cAAAA,IAAAA,CAAGS,wBAAyB,CAAEC,OAAQb,Q,uEC2ElD,UA5FuC,SAAC,GAA2B,IAAzBc,EAAwB,EAAxBA,KAC9BN,EADsD,EAAlBO,YACpCP,MACFQ,EAAYF,EAAKG,KAAKC,aAAatB,MACnCuB,EAAcL,EAAKG,KAAKC,aAAaC,YACrCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACInB,EAAAA,cAACoB,EAAAA,EAAD,CAAQ3B,MAAOoB,GACXb,EAAAA,cAACqB,EAAAA,EAAD,CACI5B,MAAK,SAAWY,EAAX,KACLiB,SAAU,CAAC,OAAD,8BAA0CjB,KAExDL,EAAAA,cAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAAA,SAAWK,EAAX,KACAL,EAAAA,cAAAA,IAAAA,CAAGuB,UAAU,YAAb,qCACuClB,EADvC,KAGAL,EAAAA,cAAAA,IAAAA,CAAGuB,UAAU,YAAb,8BAEmBP,IAGvBhB,EAAAA,cAAAA,UAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKuB,UAAS,gBACTN,EAAMb,KAAI,gBAAGoB,EAAH,EAAGA,KAAH,OACPxB,EAAAA,cAACyB,EAAAA,EAAD,CACIhC,MAAW+B,EAAKE,YAAYjC,MAC5BC,KAAW8B,EAAKG,OAAOjC,KACvBC,KAAW6B,EAAKE,YAAY/B,KAC5BC,OAAW4B,EAAKE,YAAY9B,OAC5BC,QAAW2B,EAAK3B","sources":["webpack://acozy-space/./src/components/postPreview.tsx","webpack://acozy-space/./src/templates/topic.tsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface Props {\n    readonly title?: string,\n    readonly slug: string,\n    readonly date: string,\n    readonly topics: [string],\n    readonly excerpt: string,\n}\n\nconst PostPreview: React.FC<Props> = ({\n    title, \n    slug, \n    date,\n    topics, \n    excerpt\n}) => {\n    console.log(slug)\n    return (\n        <div key={slug}>\n            <h3>\n                <Link to={slug}>{title || slug}</Link>\n            </h3>\n            <small>\n                {date} ○\n                topics: {topics.map((topic, i, arr) => \n                    <Link to={`/topics/${topic}/`}>\n                        {(i < arr.length - 1) ? topic + ', ' : topic}\n                    </Link>)}\n            </small>\n            <p dangerouslySetInnerHTML={{ __html: excerpt }} />\n        </div>\n    )\n}\n\nexport default PostPreview","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport PostPreview from '../components/postPreview'\n\ninterface Props {\n    readonly data: PageQueryData\n    readonly pageContext: {\n        topic: string\n    }\n}\n\nconst TopicTemplate: React.FC<Props> = ({ data, pageContext }) => {\n    const { topic } = pageContext\n    const siteTitle = data.site.siteMetadata.title\n    const lastUpdated = data.site.siteMetadata.lastUpdated\n    const posts = data.allMarkdownRemark.edges\n\n    return (\n        <Layout title={siteTitle}>\n            <Head\n                title={`Topic:${topic}.'`}\n                keywords={[`blog`, `gatsby`, `javascript`, `react`, topic]}\n            />\n            <header>\n                <h1>Topic:{topic}.</h1>\n                <p className='subtitle'>\n                    Collection of posts on the topic `{topic}`\n                </p>\n                <p className='pageinfo'>\n                    2021-09-27 ○\n                    last updated: {lastUpdated}\n                </p>\n            </header>\n            <article>\n                <div className={`page-content`}>\n                    {posts.map(({ node }) => \n                        <PostPreview \n                            title   = {node.frontmatter.title}\n                            slug    = {node.fields.slug}\n                            date    = {node.frontmatter.date}\n                            topics  = {node.frontmatter.topics}\n                            excerpt = {node.excerpt}/>\n                    )}\n                </div>\n            </article>\n        </Layout>\n    )\n}\n\ninterface PageQueryData {\n    site: {\n        siteMetadata: {\n            title: string\n            lastUpdated: string\n        }\n    }\n    allMarkdownRemark: {\n        totalCount: number\n        edges: {\n            node: {\n                excerpt: string\n                fields: {\n                    slug: string\n                }\n                frontmatter: {\n                    date: string\n                    title: string\n                    subtitle: string\n                    topics: [string]\n                }\n            }\n        }[]\n    }\n}\n\nexport const pageQuery = graphql`\n  query TopicPage($topic: String) {\n    site {\n      siteMetadata {\n        title\n        lastUpdated\n      }\n    }\n    allMarkdownRemark(limit: 1000, filter: {frontmatter: {topics: {in: [$topic]}}}) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 2500)\n          fields {\n            slug\n          }\n          frontmatter {\n            date\n            title\n            subtitle\n            topics\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default TopicTemplate"],"names":["title","slug","date","topics","excerpt","console","log","React","key","Link","to","map","topic","i","arr","length","dangerouslySetInnerHTML","__html","data","pageContext","siteTitle","site","siteMetadata","lastUpdated","posts","allMarkdownRemark","edges","Layout","Head","keywords","className","node","PostPreview","frontmatter","fields"],"sourceRoot":""}