{"version":3,"file":"component---src-templates-post-tsx-48534f8c6889849bf641.js","mappings":"uLAkBMA,GAAWC,EAAAA,EAAAA,IAAO,KAAPA,CAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,yHAgGd,UAvFsC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACrCC,EAAOF,EAAKG,eACZC,EAAYJ,EAAKK,KAAKC,aAAaC,MACjCC,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAElB,OACIC,EAAAA,cAACC,EAAAA,EAAD,CAAQJ,MAAOH,GACXM,EAAAA,cAACE,EAAAA,EAAD,CAAML,MAAOL,EAAKW,YAAYN,MAAOO,YAAaZ,EAAKa,UACvDL,EAAAA,cAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAKR,EAAKW,YAAYN,OACtBG,EAAAA,cAAAA,IAAAA,CAAGM,UAAU,YAAYd,EAAKW,YAAYI,UAC1CP,EAAAA,cAAAA,IAAAA,CAAGM,UAAU,YACRd,EAAKW,YAAYK,KADtB,oBAEmBhB,EAAKW,YAAYM,YAFpC,cAGajB,EAAKW,YAAYO,OAAOC,KAAI,SAACC,EAAOC,EAAGC,GAAX,OACjCd,EAAAA,cAACe,EAAAA,KAAD,CAAMC,GAAE,WAAaJ,EAAb,IAAuBK,IAAKL,GAC9BC,EAAIC,EAAII,OAAS,EAAKN,EAAQ,KAAOA,QAIvDZ,EAAAA,cAAAA,UAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKM,UAAS,gBACVN,EAAAA,cAAAA,MAAAA,CAAKmB,wBAAyB,CAAEC,OAAQ5B,EAAK6B,QAC7CrB,EAAAA,cAACb,EAAD,KACKW,GACGE,EAAAA,cAAAA,KAAAA,CAAIiB,IAAKnB,EAASwB,OAAOC,MACrBvB,EAAAA,cAACe,EAAAA,KAAD,CAAMC,GAAIlB,EAASwB,OAAOC,KAAMC,IAAI,QAApC,KACO1B,EAASK,YAAYN,QAInCE,GACGC,EAAAA,cAAAA,KAAAA,CAAIiB,IAAKlB,EAAKuB,OAAOC,MACjBvB,EAAAA,cAACe,EAAAA,KAAD,CAAMC,GAAIjB,EAAKuB,OAAOC,KAAMC,IAAI,QAC3BzB,EAAKI,YAAYN,MADtB","sources":["webpack://acozy-space/./src/templates/post.tsx"],"sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { styled } from '../styles/theme'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport { node } from 'prop-types'\n\ninterface Props {\n    readonly data: PageQueryData\n    readonly pageContext: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        previous?: any\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        next?: any\n    }\n}\n\nconst StyledUl = styled('ul')`\n  list-style-type: none;\n\n  li::before {\n    content: '' !important;\n    padding-right: 0 !important;\n  }\n`\n\nconst PostTemplate: React.FC<Props> = ({ data, pageContext }) => {\n    const post = data.markdownRemark\n    const siteTitle = data.site.siteMetadata.title\n    const { previous, next } = pageContext\n\n    return (\n        <Layout title={siteTitle}>\n            <Head title={post.frontmatter.title} description={post.excerpt} />\n            <header>\n                <h1>{post.frontmatter.title}</h1>\n                <p className='subtitle'>{post.frontmatter.subtitle}</p>\n                <p className='pageinfo'>\n                    {post.frontmatter.date} ○\n                    last updated: {post.frontmatter.lastupdated} ○\n                    topics: {post.frontmatter.topics.map((topic, i, arr) => \n                        <Link to={`/topics/${topic}/`} key={topic}>\n                            {(i < arr.length - 1) ? topic + ', ' : topic}\n                        </Link>)}\n                </p>\n            </header>\n            <article>\n                <div className={`page-content`}>\n                    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                    <StyledUl>\n                        {previous && (\n                            <li key={previous.fields.slug}>\n                                <Link to={previous.fields.slug} rel=\"prev\">\n                                    ← {previous.frontmatter.title}\n                                </Link>\n                            </li>\n                        )}\n                        {next && (\n                            <li key={next.fields.slug}>\n                                <Link to={next.fields.slug} rel=\"next\">\n                                    {next.frontmatter.title} →\n                                </Link>\n                            </li>\n                        )}\n                    </StyledUl>\n                </div>\n            </article>\n        </Layout>\n    )\n}\n\ninterface PageQueryData {\n    site: {\n        siteMetadata: {\n            title: string\n        }\n    }\n    markdownRemark: {\n        id?: string\n        excerpt?: string\n        html: string\n        frontmatter: {\n            title: string\n            subtitle: string\n            date: string\n            lastupdated: string\n            topics: [string]\n        }\n    }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      excerpt(pruneLength: 1000)\n      html\n      frontmatter {\n        title\n        subtitle\n        date(formatString: \"YYYY-MM-DD\")\n        lastupdated(formatString: \"YYYY-MM-DD\")\n        topics\n      }\n    }\n  }\n`\n\nexport default PostTemplate"],"names":["StyledUl","styled","_templateObject","data","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","React","Layout","Head","frontmatter","description","excerpt","className","subtitle","date","lastupdated","topics","map","topic","i","arr","Link","to","key","length","dangerouslySetInnerHTML","__html","html","fields","slug","rel"],"sourceRoot":""}