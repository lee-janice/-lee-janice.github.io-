{"version":3,"file":"component---src-templates-year-tsx-e5f7b2a51f8d7937ab1c.js","mappings":"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","sources":["webpack://acozy-space/./src/components/postPreview.tsx","webpack://acozy-space/./src/templates/year.tsx","webpack://acozy-space/./src/util/monthNumberToName.ts"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface Props {\n    readonly title?: string,\n    readonly subtitle: string,\n    readonly slug: string,\n    readonly date: string,\n    readonly lastUpdated: string,\n    readonly topics: [string],\n    readonly excerpt: string,\n    readonly showExcerpt: boolean,\n}\n\nconst PostPreview: React.FC<Props> = ({\n    title, \n    subtitle, \n    slug, \n    date,\n    lastUpdated,\n    topics, \n    excerpt,\n    showExcerpt\n}) => {\n    date = date.slice(0, 10)\n    lastUpdated = lastUpdated.slice(0, 10)\n    return (\n        <div>\n            <h3>\n                <Link to={slug}>{title || slug}</Link>\n            </h3>\n            <small>\n                {date} ○\n                last updated: {lastUpdated} ○\n                topics: {topics.map((topic, i, arr) => \n                    <Link to={`/topics/${topic}/`} key={topic}>\n                        {(i < arr.length - 1) ? topic + ', ' : topic}\n                    </Link>)}\n            </small>\n            {showExcerpt ? <p dangerouslySetInnerHTML={{ __html: excerpt }} /> : <p dangerouslySetInnerHTML={{ __html: subtitle }} />}\n        </div>\n    )\n}\n\nexport default PostPreview","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport monthNumberToName from '../util/monthNumberToName'\nimport PostPreview from '../components/postPreview'\n\ninterface Props {\n    readonly data: PageQueryData\n    readonly pageContext: {\n        year: string\n        mthDirRegexByYear: string\n    }\n}\n\nconst YearTemplate: React.FC<Props> = ({ data, pageContext }) => {\n    const { year } = pageContext\n    const siteTitle = data.site.siteMetadata.title\n    const lastUpdated = data.site.siteMetadata.lastUpdated\n    const group = data.numEntries.group\n    const months = data.allDirectory.edges\n    const entries = data.entries.edges\n\n    return (\n        <Layout title={siteTitle}>\n            <Head\n                title={`Year:${year}.`}\n                keywords={[`journal`, year]}\n            />\n            <header>\n                <h1>Year:{year}.</h1>\n                <p className='subtitle'>\n                    Collection of journal entries for {year}; entries by month\n                </p>\n                <p className='pageinfo'>\n                    2021-09-18 ○\n                    last updated: {lastUpdated}\n                </p>\n            </header>\n            <article>\n                <div className={`page-content`}>\n                    <h2>Entries by Month</h2>\n                    <hr />\n                    {months.map(({ node }) => {\n                        const monthName = monthNumberToName(node.name)\n                        const month = group.filter((monthDir) => monthDir.fieldValue.slice(-2) === node.name)[0]\n                        // if the year/month folder doesn't contain .md files, return\n                        if (!month) return\n                        return (\n                            <div key={node.name}>\n                                <h3>\n                                    <Link to={`/journal/${year}/${node.name}/`}>\n                                        {monthName + \" \" + year}\n                                    </Link>\n                                </h3>\n                                <small>\n                                    {month.totalCount} entr\n                                    {month.totalCount === 1 ? 'y' : 'ies'}\n                                </small>\n                            </div>\n                        )\n                    })}\n                    <br />\n                    <h2>{year} Entries</h2>\n                    <hr />\n                    {entries.map(({ node }) => \n                        <PostPreview key={node.fields.slug}\n                            title       = {node.frontmatter.title}\n                            subtitle    = {node.frontmatter.subtitle}\n                            slug        = {node.fields.slug}\n                            date        = {node.frontmatter.date}\n                            lastUpdated = {node.frontmatter.lastupdated}\n                            topics      = {node.frontmatter.topics}\n                            excerpt     = {node.excerpt}\n                            showExcerpt = {true}/>\n                    )}\n                </div>\n            </article>\n        </Layout>\n    )\n}\n\ninterface PageQueryData {\n    site: {\n        siteMetadata: {\n            title: string\n            lastUpdated: string\n        }\n    }\n    allDirectory: {\n        edges: {\n            node: {\n                name: string\n            }\n        }[]\n    }\n    numEntries: {\n        group: {\n            fieldValue: string\n            totalCount: number\n        }[]\n    }\n    entries: {\n        edges: {\n            node: {\n                excerpt: string\n                fields: {\n                    slug: string\n                }\n                frontmatter: {\n                    title: string\n                    subtitle: string\n                    date: string\n                    lastupdated: string\n                    topics: [string]\n                }\n            }\n        }[]\n    }\n}\n\nexport const pageQuery = graphql`\n  query YearPage($mthDirRegexByYear: String) {\n    site {\n      siteMetadata {\n        title\n        lastUpdated\n      }\n    }\n    allDirectory(\n        filter: { relativePath: {regex: $mthDirRegexByYear} }\n        sort: {fields: name, order: ASC}\n    ) {\n      edges {\n        node {\n          name\n        }\n      }\n    }\n    numEntries: allMarkdownRemark(filter: {fields: {slug: {regex: $mthDirRegexByYear}}}) {\n        totalCount\n        group(field: frontmatter___group) {\n          totalCount\n          fieldValue\n        }\n    }\n    entries: allMarkdownRemark(\n        filter: {fields: {slug: {regex: $mthDirRegexByYear}}}\n        sort: {fields: [frontmatter___lastupdated], order: DESC}\n      ) {\n        edges {\n          node {\n            excerpt(pruneLength: 1000)\n            fields {\n              slug\n            }\n            frontmatter {\n              title\n              subtitle\n              date\n              lastupdated\n              topics\n            }\n          }\n        }\n      }\n  }\n`\n\nexport default YearTemplate","function monthNumberToName(number: string): string {\n    switch (+number) {\n        case 1: { return 'January' }\n        case 2: { return 'February' }\n        case 3: { return 'March' }\n        case 4: { return 'April' }\n        case 5: { return 'May' }\n        case 6: { return 'June' }\n        case 7: { return 'July' }\n        case 8: { return 'August' }\n        case 9: { return 'September' }\n        case 10: { return 'October' }\n        case 11: { return 'November' }\n        case 12: { return 'December' }\n        default: { return '' }\n    }\n}\n\nexport default monthNumberToName"],"names":["title","subtitle","slug","date","lastUpdated","topics","excerpt","showExcerpt","slice","React","Link","to","map","topic","i","arr","key","length","dangerouslySetInnerHTML","__html","data","year","pageContext","siteTitle","site","siteMetadata","group","numEntries","months","allDirectory","edges","entries","Layout","Head","keywords","className","node","monthName","monthNumberToName","name","month","filter","monthDir","fieldValue","totalCount","PostPreview","fields","frontmatter","lastupdated","number"],"sourceRoot":""}