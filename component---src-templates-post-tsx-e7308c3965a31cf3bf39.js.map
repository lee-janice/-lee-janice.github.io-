{"version":3,"file":"component---src-templates-post-tsx-e7308c3965a31cf3bf39.js","mappings":"wLAkBMA,GAAWC,EAAAA,EAAAA,IAAO,KAAPA,CAAHC,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,CAAAA,yHAmGd,UA1FsC,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACrCC,EAAOF,EAAKG,eACZC,EAAYJ,EAAKK,KAAKC,aAAaC,MACjCC,EAAmBP,EAAnBO,SAAUC,EAASR,EAATQ,KAEZC,EAAOR,EAAKS,YAAYD,KAAKE,MAAM,EAAG,IACtCC,EAAcX,EAAKS,YAAYG,YAAYF,MAAM,EAAG,IAE1D,OACIG,EAAAA,cAACC,EAAAA,EAAD,CAAQT,MAAOH,GACXW,EAAAA,cAACE,EAAAA,EAAD,CAAMV,MAAOL,EAAKS,YAAYJ,MAAOW,YAAahB,EAAKiB,UACvDJ,EAAAA,cAAAA,SAAAA,KACIA,EAAAA,cAAAA,KAAAA,KAAKb,EAAKS,YAAYJ,OACtBQ,EAAAA,cAAAA,IAAAA,CAAGK,UAAU,YAAYlB,EAAKS,YAAYU,UAC1CN,EAAAA,cAAAA,IAAAA,CAAGK,UAAU,YACRV,EADL,oBAEmBG,EAFnB,cAGaX,EAAKS,YAAYW,OAAOC,KAAI,SAACC,EAAOC,EAAGC,GAAX,OACjCX,EAAAA,cAACY,EAAAA,KAAD,CAAMC,GAAE,WAAaJ,EAAb,IAAuBK,IAAKL,GAC9BC,EAAIC,EAAII,OAAS,EAAKN,EAAQ,KAAOA,EAFtC,MAMjBT,EAAAA,cAAAA,UAAAA,KACIA,EAAAA,cAAAA,MAAAA,CAAKK,UAAS,gBACVL,EAAAA,cAAAA,MAAAA,CAAKgB,wBAAyB,CAAEC,OAAQ9B,EAAK+B,QAC7ClB,EAAAA,cAAClB,EAAD,KACKW,GACGO,EAAAA,cAAAA,KAAAA,CAAIc,IAAKrB,EAAS0B,OAAOC,MACrBpB,EAAAA,cAACY,EAAAA,KAAD,CAAMC,GAAIpB,EAAS0B,OAAOC,KAAMC,IAAI,QAApC,KACO5B,EAASG,YAAYJ,QAInCE,GACGM,EAAAA,cAAAA,KAAAA,CAAIc,IAAKpB,EAAKyB,OAAOC,MACjBpB,EAAAA,cAACY,EAAAA,KAAD,CAAMC,GAAInB,EAAKyB,OAAOC,KAAMC,IAAI,QAC3B3B,EAAKE,YAAYJ,MADtB,UApChC,C","sources":["webpack://acozy-space/./src/templates/post.tsx"],"sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { styled } from '../styles/theme'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport { node } from 'prop-types'\n\ninterface Props {\n    readonly data: PageQueryData\n    readonly pageContext: {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        previous?: any\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        next?: any\n    }\n}\n\nconst StyledUl = styled('ul')`\n  list-style-type: none;\n\n  li::before {\n    content: '' !important;\n    padding-right: 0 !important;\n  }\n`\n\nconst PostTemplate: React.FC<Props> = ({ data, pageContext }) => {\n    const post = data.markdownRemark\n    const siteTitle = data.site.siteMetadata.title\n    const { previous, next } = pageContext\n\n    const date = post.frontmatter.date.slice(0, 10)\n    const lastUpdated = post.frontmatter.lastupdated.slice(0, 10)\n\n    return (\n        <Layout title={siteTitle}>\n            <Head title={post.frontmatter.title} description={post.excerpt} />\n            <header>\n                <h1>{post.frontmatter.title}</h1>\n                <p className='subtitle'>{post.frontmatter.subtitle}</p>\n                <p className='pageinfo'>\n                    {date} ○\n                    last updated: {lastUpdated} ○\n                    topics: {post.frontmatter.topics.map((topic, i, arr) => \n                        <Link to={`/topics/${topic}/`} key={topic}>\n                            {(i < arr.length - 1) ? topic + ', ' : topic}\n                        </Link>)}\n                </p>\n            </header>\n            <article>\n                <div className={`page-content`}>\n                    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                    <StyledUl>\n                        {previous && (\n                            <li key={previous.fields.slug}>\n                                <Link to={previous.fields.slug} rel=\"prev\">\n                                    ← {previous.frontmatter.title}\n                                </Link>\n                            </li>\n                        )}\n                        {next && (\n                            <li key={next.fields.slug}>\n                                <Link to={next.fields.slug} rel=\"next\">\n                                    {next.frontmatter.title} →\n                                </Link>\n                            </li>\n                        )}\n                    </StyledUl>\n                </div>\n            </article>\n        </Layout>\n    )\n}\n\ninterface PageQueryData {\n    site: {\n        siteMetadata: {\n            title: string\n        }\n    }\n    markdownRemark: {\n        id?: string\n        excerpt?: string\n        html: string\n        frontmatter: {\n            title: string\n            subtitle: string\n            date: string\n            lastupdated: string\n            topics: [string]\n        }\n    }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: {slug: {eq: $slug}}) {\n      id\n      excerpt(pruneLength: 1000)\n      html\n      frontmatter {\n        title\n        subtitle\n        date\n        lastupdated\n        topics\n      }\n    }\n  }\n`\n\nexport default PostTemplate"],"names":["StyledUl","styled","_templateObject","data","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","title","previous","next","date","frontmatter","slice","lastUpdated","lastupdated","React","Layout","Head","description","excerpt","className","subtitle","topics","map","topic","i","arr","Link","to","key","length","dangerouslySetInnerHTML","__html","html","fields","slug","rel"],"sourceRoot":""}