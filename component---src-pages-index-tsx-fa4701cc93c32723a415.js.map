{"version":3,"file":"component---src-pages-index-tsx-fa4701cc93c32723a415.js","mappings":"uIA4CA,IA9BqC,SAAC,GAS/B,IARHA,EAQE,EARFA,MACAC,EAOE,EAPFA,SACAC,EAME,EANFA,KACAC,EAKE,EALFA,KACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,OACAC,EAEE,EAFFA,QACAC,EACE,EADFA,YAIA,OAFAJ,EAAOA,EAAKK,MAAM,EAAG,IACrBJ,EAAcA,EAAYI,MAAM,EAAG,IAE/BC,EAAAA,cAAAA,MAAAA,KACIA,EAAAA,cAAAA,KAAAA,KACIA,EAAAA,cAACC,EAAAA,KAAD,CAAMC,GAAIT,GAAOF,GAASE,IAE9BO,EAAAA,cAAAA,QAAAA,KACKN,EADL,oBAEmBC,EAFnB,cAGaC,EAAOO,KAAI,SAACC,EAAOC,EAAGC,GAAX,OAChBN,EAAAA,cAACC,EAAAA,KAAD,CAAMC,GAAE,WAAaE,EAAb,IAAuBG,IAAKH,GAC9BC,EAAIC,EAAIE,OAAS,EAAKJ,EAAQ,KAAOA,EAFtC,KAKZN,EAAcE,EAAAA,cAAAA,IAAAA,CAAGS,wBAAyB,CAAEC,OAAQb,KAAgBG,EAAAA,cAAAA,IAAAA,CAAGS,wBAAyB,CAAEC,OAAQlB,KAzBvH,C,oFCqGA,UAxG+B,SAAC,GAAa,IAAXmB,EAAW,EAAXA,KAC1BC,EAAYD,EAAKE,KAAKC,aAAavB,MACnCI,EAAcgB,EAAKE,KAAKC,aAAanB,YACrCoB,EAAQJ,EAAKK,kBAAkBC,MAErC,OACEjB,EAAAA,cAACkB,EAAAA,EAAD,CAAQ3B,MAAOqB,GACbZ,EAAAA,cAACmB,EAAAA,EAAD,CAAM5B,MAAM,QAAQ6B,SAAU,CAAC,OAAD,2BAC9BpB,EAAAA,cAAAA,SAAAA,KACEA,EAAAA,cAAAA,KAAAA,KAAAA,sDACAA,EAAAA,cAAAA,IAAAA,CAAGqB,UAAU,YAAb,uDACArB,EAAAA,cAAAA,IAAAA,CAAGqB,UAAU,YAAb,8BAEiB1B,IAGnBK,EAAAA,cAAAA,MAAAA,CAAKqB,UAAS,gBACZrB,EAAAA,cAAAA,KAAAA,KAAAA,eACAA,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,IAAAA,KAAAA,2WAIoCA,EAAAA,cAACC,EAAAA,KAAD,CAAMC,GAAE,aAAR,iBAJpC,wEAIoJF,EAAAA,cAACC,EAAAA,KAAD,CAAMC,GAAE,oBAAR,wBAJpJ,gCAI0OF,EAAAA,cAAAA,IAAAA,CAAGsB,KAAK,gCAAR,wBAJ1O,KAMAtB,EAAAA,cAAAA,KAAAA,KAAAA,0BACAA,EAAAA,cAAAA,KAAAA,MACCe,EAAMZ,KAAI,gBAAGoB,EAAH,EAAGA,KAAH,OACPvB,EAAAA,cAACwB,EAAAA,EAAD,CAAajB,IAAKgB,EAAKE,OAAOhC,KAC1BF,MAAegC,EAAKG,YAAYnC,MAChCC,SAAe+B,EAAKG,YAAYlC,SAChCC,KAAe8B,EAAKE,OAAOhC,KAC3BC,KAAe6B,EAAKG,YAAYhC,KAChCC,YAAe4B,EAAKG,YAAYC,YAChC/B,OAAe2B,EAAKG,YAAY9B,OAChCC,QAAe0B,EAAK1B,QACpBC,aAAe,GATtB,KAYHE,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,KAAAA,MACAA,EAAAA,cAAAA,KAAAA,MA1CN,C","sources":["webpack://acozy-space/./src/components/postPreview.tsx","webpack://acozy-space/./src/pages/index.tsx"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\ninterface Props {\n    readonly title?: string,\n    readonly subtitle: string,\n    readonly slug: string,\n    readonly date: string,\n    readonly lastUpdated: string,\n    readonly topics: [string],\n    readonly excerpt: string,\n    readonly showExcerpt: boolean,\n}\n\nconst PostPreview: React.FC<Props> = ({\n    title, \n    subtitle, \n    slug, \n    date,\n    lastUpdated,\n    topics, \n    excerpt,\n    showExcerpt\n}) => {\n    date = date.slice(0, 10)\n    lastUpdated = lastUpdated.slice(0, 10)\n    return (\n        <div>\n            <h3>\n                <Link to={slug}>{title || slug}</Link>\n            </h3>\n            <small>\n                {date} ○\n                last updated: {lastUpdated} ○\n                topics: {topics.map((topic, i, arr) => \n                    <Link to={`/topics/${topic}/`} key={topic}>\n                        {(i < arr.length - 1) ? topic + ', ' : topic}\n                    </Link>)}\n            </small>\n            {showExcerpt ? <p dangerouslySetInnerHTML={{ __html: excerpt }} /> : <p dangerouslySetInnerHTML={{ __html: subtitle }} />}\n        </div>\n    )\n}\n\nexport default PostPreview","import React from 'react'\nimport { Link, graphql } from 'gatsby'\n\nimport Layout from '../components/layout'\nimport Head from '../components/head'\nimport PostPreview from '../components/postPreview'\n\ninterface Props {\n  readonly data: PageQueryData\n}\n\nconst Index: React.FC<Props> = ({ data }) => {\n  const siteTitle = data.site.siteMetadata.title\n  const lastUpdated = data.site.siteMetadata.lastUpdated\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Head title=\"Home.\" keywords={[`blog`, `janice`, `lee`, `pomona`]} />\n      <header>\n        <h1>Welcome to my website. Why don't you stay a while?</h1>\n        <p className='subtitle'>Website homepage; a short description; recent posts</p>\n        <p className='pageinfo'>\n          2021-09-18 ○\n          last updated: {lastUpdated}\n        </p>\n      </header>\n      <div className={`page-content`}>\n        <h2>Description</h2>\n        <hr />\n        <p>\n          This is my personal website.\n          I created it primarily for experiential use as a centralized knowledge/content base and as an outlet for my increasingly erratic thoughts and curiosities.\n          I hope that it will be a comprehensible introduction into some of the machinations of my mind, and I hope that you will enjoy your stay here!\n          For information about me, see the <Link to={`/about-me`}>About me page</Link>; for information about the purpose and design of this site, see the <Link to={`/about-this-site`}>About this site page</Link>; to contact me, email me at <a href='mailto: janicel375@gmail.com'>janicel375@gmail.com</a>.\n        </p>\n        <h2>Recently Updated Posts</h2>\n        <hr />\n        {posts.map(({ node }) => \n            <PostPreview key={node.fields.slug}\n                title       = {node.frontmatter.title}\n                subtitle    = {node.frontmatter.subtitle}\n                slug        = {node.fields.slug}\n                date        = {node.frontmatter.date}\n                lastUpdated = {node.frontmatter.lastupdated}\n                topics      = {node.frontmatter.topics}\n                excerpt     = {node.excerpt}\n                showExcerpt = {false}/>\n        )}\n      </div>\n      <br />\n      <br />\n      <br />\n      <br />\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n      lastUpdated: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          title: string\n          subtitle: string\n          date: string\n          lastupdated: string\n          topics: [string]\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        lastUpdated\n      }\n    }\n    allMarkdownRemark(\n      filter: {frontmatter: {published: {ne: false}}}\n      sort: {fields: [frontmatter___lastupdated], order: DESC}\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            subtitle\n            date\n            lastupdated\n            topics\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Index"],"names":["title","subtitle","slug","date","lastUpdated","topics","excerpt","showExcerpt","slice","React","Link","to","map","topic","i","arr","key","length","dangerouslySetInnerHTML","__html","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","Layout","Head","keywords","className","href","node","PostPreview","fields","frontmatter","lastupdated"],"sourceRoot":""}